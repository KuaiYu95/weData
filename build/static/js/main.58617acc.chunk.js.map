{"version":3,"sources":["components/Loading/index.tsx","containers/Main/index.tsx","containers/Ky/index.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","User","Loadable","loader","loading","Blog","BlogDetail","Post","Diary","Todos","FootPrint","Main","description","style","color","marginTop","confirm","localStorage","getItem","path","component","this","renderEmpty","renderSpace","Component","Header","Content","Sider","Ky","state","collapsed","selectedKeys","onCollapse","setState","handleClick","NProgress","done","headTitle","content","height","collapsible","defaultSelectedKeys","mode","onSelect","menuList","map","it","Item","key","onClick","setItem","to","type","title","id","margin","start","pathname","window","location","slice","user","blog","diary","footPrint","todos","pictureWall","message","Boolean","hostname","match","ReactDOM","render","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58617acc.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Loading() {\n  return (\n    <div className=\"loading\">\n      <div className='icon'></div>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { Empty } from 'antd'\nimport Loadable from 'react-loadable'\nimport Loading from '../../components/Loading'\n\nlet User = Loadable({\n  loader: () => import('../User'),\n  loading: Loading\n})\nlet Blog = Loadable({\n  loader: () => import('../Blog'),\n  loading: Loading\n})\nlet BlogDetail = Loadable({\n  loader: () => import('../BlogDetail'),\n  loading: Loading\n})\nlet Post = Loadable({\n  loader: () => import('../Post'),\n  loading: Loading\n})\nlet Diary = Loadable({\n  loader: () => import('../Diary'),\n  loading: Loading\n})\nlet Todos = Loadable({\n  loader: () => import('../Todos'),\n  loading: Loading\n})\n// let TimeLine = Loadable({\n//   loader:()=>import('../TimeLine'),\n//   loading: Loading\n// })\n// let PictureWall = Loadable({\n//   loader:()=>import('../PictureWall'),\n//   loading: Loading\n// })\nlet FootPrint = Loadable({\n  loader: () => import('../FootPrint'),\n  loading: Loading\n})\n\nexport default class Main extends Component<any, any> {\n\n  renderEmpty() {\n    return <Empty description=\"对不起，您没有访问权限\" style={{ color: '#fff', marginTop: '30vh'}} />\n  }\n\n  renderSpace() {\n    return <Empty description=\"对不起，没找到你想要的页面\" style={{ color: '#fff', marginTop: '30vh'}} />\n  }\n\n  render() {\n    const confirm = localStorage.getItem('confirm') === '0913'\n    return (\n      <Switch>\n        <Route path='/blog' component={Blog} />\n        <Route path='/post' component={confirm ? Post : this.renderEmpty} />\n        <Route path='/blog-detail/id:id' component={BlogDetail} />\n        <Route path='/diary' component={confirm ? Diary : this.renderEmpty} />\n        <Route path='/foot-print' component={confirm ? FootPrint : this.renderEmpty} />\n        <Route path='/picture-wall' component={this.renderEmpty} />\n        <Route path='/todos' component={Todos} />\n        <Route path='/message' component={this.renderEmpty} />\n        <Route path='/user' component={User} />\n        <Route path='/' component={this.renderSpace} />\n      </Switch>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Layout, Menu, Icon } from 'antd'\nimport Main from '../Main';\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\nimport './index.less'\n\nconst { Header, Content, Sider } = Layout\nexport default class Ky extends Component<any, any> {\n  state = {\n    collapsed: true,\n    selectedKeys: [],\n  }\n\n  static getDerivedStateFromProps() {\n    NProgress.start()\n    let pathname = window.location.pathname.slice(1) || localStorage.getItem('pathname')\n    if (pathname === '' || pathname === null) {\n      pathname = 'user'\n      window.location.pathname = '/user'\n    } \n    return { selectedKeys: [pathname] }\n  }\n\n  componentDidMount() {\n    NProgress.done()\n  }\n\n  componentDidUpdate() {\n    NProgress.done()\n  }\n\n  onCollapse = (collapsed: boolean) => {\n    this.setState({ collapsed });\n  }\n\n  handleClick = ({ selectedKeys }: any) => {\n    this.setState({ selectedKeys })\n  }\n\n  render() {\n    const { collapsed, selectedKeys } = this.state\n    const headTitle = content[selectedKeys[0]]\n    return (\n      <Layout style={{ height: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse} className='ant-layout-sider-light'>\n          <div className=\"logo\">\n            YYJ\n          </div>\n          <Menu defaultSelectedKeys={selectedKeys} mode=\"inline\" onSelect={this.handleClick}>\n            {menuList.map((it: any) => {\n              return <Menu.Item key={it.key} onClick={() => localStorage.setItem('pathname', it.key)}>\n                <Link to={'/' + it.key}>\n                  <Icon type={it.type} />\n                  <span>{it.title}</span>\n                </Link>\n              </Menu.Item>\n            })}\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header id=\"header-title\" className=\"ky-header\">{headTitle}</Header>\n          <Content style={{ margin: '0 16px' }}>\n            <div className=\"content\" style={{ height: 'calc(100vh - 96px)', margin: '16px 0' }}>\n              <div id='stars'></div>\n              <div id='stars2'></div>\n              <div id='stars3'></div>\n              <Main />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nconst menuList = [\n  {\n    key: \"user\",\n    type: \"user\",\n    title: \"主页\",\n  }, {\n    key: \"blog\",\n    type: \"file\",\n    title: \"博客\",\n  }, {\n    key: \"diary\",\n    type: \"read\",\n    title: \"日记\",\n  }, {\n    key: \"footPrint\",\n    type: \"flag\",\n    title: \"足迹\",\n  }, {\n    key: \"pictureWall\",\n    type: \"picture\",\n    title: \"照片墙\"\n  }, {\n    key: \"todos\",\n    type: \"unordered-list\",\n    title: \"待办事项\",\n  }, {\n    //   key: \"timeline\",\n    //   type: \"line-chart\",\n    //   title: \"时间线\"\n    // }, {\n    key: 'message',\n    type: 'mail',\n    title: '留言板',\n  }\n]\n\nconst content: any = {\n  user: '主页',\n  blog: '博客',\n  diary: '日记',\n  footPrint: '足迹',\n  todos: '待办事项',\n  // timeline: '变更状态记录',\n  pictureWall: '照片墙',\n  message: '留言板'\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Ky from './containers/Ky'\nimport './index.less'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render((\n  <BrowserRouter>\n    <React.Suspense fallback={<div>loading...</div>}>\n      <Route path='/' component={Ky}></Route>\n    </React.Suspense>\n  </BrowserRouter>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}