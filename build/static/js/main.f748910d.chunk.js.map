{"version":3,"sources":["components/Home/index.tsx","components/Loading/index.tsx","containers/Ky/index.tsx","containers/Yyj/index.jsx","containers/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","to","Loading","PackageBackTop","Loadable","loader","loading","User","Blog","Diary","Todos","TimeLine","PictureWall","FootPrint","Header","Content","Footer","Sider","Ky","state","collapsed","selectedKeys","onCollapse","setState","handleClick","NProgress","start","done","this","headTitle","content","bodyComponent","component","style","minHeight","collapsible","src","alt","width","defaultSelectedKeys","mode","onSelect","menuList","map","it","Item","key","type","title","margin","padding","background","marginTop","description","textAlign","Component","user","blog","diary","footPrint","todos","timeline","pictureWall","Yyj","Main","path","Boolean","window","location","hostname","match","ReactDOM","render","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f748910d.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from 'antd'\nimport { Link } from 'react-router-dom'\nimport './index.less'\n\nfunction Home() {\n  return (\n    <div className=\"bg\">\n      <div className=\"title\">\n        weSite\n      </div>\n      <div className=\"block\">\n        <Button><Link to=\"/ky\">ËíØÁà∏Áà∏</Link></Button>\n        <Button><Link to=\"/Yyj\">Âàò‰∫¶Ëè≤ËÑëÊÆãÁ≤â</Link></Button>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\n\nexport default function Loading() {\n  return (\n    <div className=\"loading\">\n      <div className='icon'></div>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Layout, Menu, Icon, Button, Empty } from 'antd'\nimport Loadable from 'react-loadable'\nimport Loading from '../../components/Loading'\nimport NProgress from 'nprogress' \nimport 'nprogress/nprogress.css'\nimport './index.less'\n\nlet PackageBackTop = Loadable({\n  loader:()=>import('../../components/BackTop'),\n  loading: Loading\n})\nlet User = Loadable({\n  loader:()=>import('../User'),\n  loading: Loading\n})\nlet Blog = Loadable({\n  loader:()=>import('../Blog'),\n  loading: Loading\n})\nlet Diary = Loadable({\n  loader:()=>import('../Diary'),\n  loading: Loading\n})\nlet Todos = Loadable({\n  loader:()=>import('../Todos'),\n  loading: Loading\n})\nlet TimeLine = Loadable({\n  loader:()=>import('../TimeLine'),\n  loading: Loading\n})\nlet PictureWall = Loadable({\n  loader:()=>import('../PictureWall'),\n  loading: Loading\n})\nlet FootPrint = Loadable({\n  loader:()=>import('../FootPrint'),\n  loading: Loading\n})\n\nconst { Header, Content, Footer, Sider } = Layout\nexport default class Ky extends Component<any, any> {\n  state = {\n    collapsed: true,\n    selectedKeys: ['user'],\n  }\n\n  componentWillMount() {\n    NProgress.start()\n  }\n\n  componentWillUpdate() {\n    NProgress.start()\n  }\n\n  componentDidMount() {\n    NProgress.done()\n  }\n\n  componentDidUpdate() {\n    NProgress.done()\n  }\n\n  onCollapse = (collapsed:boolean) => {\n    this.setState({ collapsed });\n  }\n\n  handleClick = ({ selectedKeys }:any) => {\n    this.setState({\n      selectedKeys\n    })\n  }\n\n  render() {\n    const { collapsed, selectedKeys } = this.state\n    const headTitle = content[selectedKeys[0]]\n    const bodyComponent = component[selectedKeys[0]]\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <PackageBackTop />\n        <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse} className='ant-layout-sider-light'>\n          <div className=\"logo\">\n            <img src='https://kuaiyu95.github.io/pictures/images/1.jpg' alt=\"logo\" style={{width: '100%'}} />\n          </div>\n          <Menu defaultSelectedKeys={selectedKeys} mode=\"inline\" onSelect={this.handleClick}>\n            {menuList.map((it: any) => {\n              return <Menu.Item key={it.key}>\n                  <Link to={'/ky/' + it.key}>\n                    <Icon type={it.type} />\n                    <span>{it.title}</span>\n                  </Link>\n                </Menu.Item>\n            })}\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header className=\"ky-header\">{headTitle}</Header>\n          <Content style={{ margin: '0 16px' }}>\n            <div style={{ padding: 24, background: '#fff', minHeight: 630, marginTop: 16 }}>\n              {bodyComponent ? bodyComponent : <Empty description=\"ÊöÇÊó†Êï∞ÊçÆ\" />}\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            <Link to=\"/\"><Button type=\"dashed\">ËøîÂõûÈ¶ñÈ°µ</Button></Link>\n          </Footer>\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nconst menuList = [\n  {\n    key: \"user\",\n    type: \"user\",\n    title: \"ÊàëÁöÑ‰∏ªÈ°µ\",\n  }, {\n    key: \"blog\",\n    type: \"file\",\n    title: \"Â∏ñÂ≠ê/ËÆ∫Âùõ\",\n  }, {\n    key: \"diary\",\n    type: \"read\",\n    title: \"Êó•ËÆ∞\",\n  }, {\n    key: \"footPrint\",\n    type: \"flag\",\n    title: \"Êàë‰ª¨ÁöÑË∂≥Ëøπ\",\n  }, {\n    key: \"pictureWall\",\n    type: \"picture\",\n    title: \"ÁÖßÁâáÂ¢ô\"\n  }, {\n    key: \"todos\",\n    type: \"unordered-list\",\n    title: \"ÂæÖÂäû‰∫ãÈ°π\",\n  }, {\n    key: \"timeline\",\n    type: \"line-chart\",\n    title: \"Êó∂Èó¥Á∫ø\"\n  }, {\n    key: '',\n    type: '',\n    title: 'ÁïôË®ÄÊùø',\n  }\n]\n\nconst content:any = {\n  user: '‰∏ªÈ°µ', \n  blog: 'ÊàëÁöÑÂçöÂÆ¢',\n  diary: 'ÊØèÊó•‰∏ÄËÆ∞',\n  footPrint: ' üë£  üë£  üë£ ',\n  todos: 'ËÆ°Âàí',\n  timeline: 'ÂèòÊõ¥Áä∂ÊÄÅËÆ∞ÂΩï',\n  pictureWall: 'ÂÆöÊ†ºÁöÑÊó∂ÂÖâ'\n}\n\nconst component:any = {\n  user: <User />,\n  blog: <Blog />,\n  diary: <Diary />,\n  footPrint: <FootPrint />,\n  todos: <Todos />,\n  timeline: <TimeLine />,\n  pictureWall: <PictureWall />,\n}","import React, { Component } from 'react';\n\nexport default class Yyj extends Component {\n\n  render() {\n    return (\n      <div>Â®üÂ®üÂëÄÔºÅ</div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Home from '../../components/Home'\nimport Ky from '../Ky'\nimport Yyj from '../Yyj'\n\nexport default class Main extends Component {\n\n  render() {\n    return (\n      <Switch>\n        <Route path='/Yyj' component={Yyj} />\n        <Route path='/ky' component={Ky} />\n        <Route path='/' component={Home} />\n      </Switch>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Main from './containers/Main'\nimport './index.less'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render((\n  <BrowserRouter>\n    <React.Suspense fallback={<div>loading...</div>}>\n      <Route path='/' component={Main}></Route>\n    </React.Suspense>\n  </BrowserRouter>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}